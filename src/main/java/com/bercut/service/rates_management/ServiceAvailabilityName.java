//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.06.03 at 05:02:25 PM MSK 
//


package com.bercut.service.rates_management;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ServiceAvailabilityName.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ServiceAvailabilityName"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="available"/&gt;
 *     &lt;enumeration value="denied"/&gt;
 *     &lt;enumeration value="overlimit"/&gt;
 *     &lt;enumeration value="day_overlimit"/&gt;
 *     &lt;enumeration value="month_overlimit"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "ServiceAvailabilityName")
@XmlEnum
public enum ServiceAvailabilityName {


    /**
     * Доступен
     * 
     */
    @XmlEnumValue("available")
    AVAILABLE("available"),

    /**
     * Недоступен
     * 
     */
    @XmlEnumValue("denied")
    DENIED("denied"),

    /**
     * Перерасход
     * 
     */
    @XmlEnumValue("overlimit")
    OVERLIMIT("overlimit"),

    /**
     * Перерасход за день
     * 
     */
    @XmlEnumValue("day_overlimit")
    DAY_OVERLIMIT("day_overlimit"),

    /**
     * Перерасход за месяц
     * 
     */
    @XmlEnumValue("month_overlimit")
    MONTH_OVERLIMIT("month_overlimit");
    private final String value;

    ServiceAvailabilityName(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ServiceAvailabilityName fromValue(String v) {
        for (ServiceAvailabilityName c: ServiceAvailabilityName.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
